import { useState, useEffect } from "react"; import { GoogleMap, Marker, useJsApiLoader, DirectionsRenderer } from "@react-google-maps/api"; import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"; import { Button } from "@/components/ui/button"; import { Badge } from "@/components/ui/badge"; import { MapPin, Star, Clock } from "lucide-react"; import Header from "@/components/Header"; interface QuestMarker { id: string; title: string; description: string; location: string; difficulty: "Easy" | "Medium" | "Hard"; points: number; type: "Location" | "Treasure" | "Challenge"; status: "Available" | "In Progress" | "Completed"; position: { lat: number; lng: number }; } const containerStyle = { width: "100%", height: "500px", borderRadius: "0.75rem" }; const center = { lat: -26.1915, lng: 28.0309, }; const CampusMap = () => { const [selectedQuest, setSelectedQuest] = useState<QuestMarker | null>(null); const [userPosition, setUserPosition] = useState<{ lat: number; lng: number } | null>(null); const [directions, setDirections] = useState<google.maps.DirectionsResult | null>(null); const { isLoaded } = useJsApiLoader({ id: "google-map-script", googleMapsApiKey: "AIzaSyDGZlh6l1MFfoGpOh5ip1OxRjCiBd95_3Y", }); useEffect(() => { navigator.geolocation.getCurrentPosition( (pos) => setUserPosition({ lat: pos.coords.latitude, lng: pos.coords.longitude }), (err) => console.error(err), { enableHighAccuracy: true } ); }, []); const questMarkers: QuestMarker[] = [ { id: "1", title: "Library Explorer", description: "Find the hidden book in the ancient literature section", location: "Main Library", difficulty: "Easy", points: 100, type: "Location", status: "Available", position: { lat: -26.1912, lng: 28.0305 } }, { id: "2", title: "Science Lab Mystery", description: "Solve the chemistry puzzle in Lab 204", location: "Science Building", difficulty: "Hard", points: 300, type: "Challenge", status: "Available", position: { lat: -26.1907, lng: 28.0315 } }, { id: "3", title: "Cafeteria Treasure", description: "Discover the secret menu item through hidden clues", location: "Student Cafeteria", difficulty: "Medium", points: 200, type: "Treasure", status: "In Progress", position: { lat: -26.1920, lng: 28.0298 } }, { id: "4", title: "Sports Hall Challenge", description: "Complete the athletic achievement course", location: "Sports Complex", difficulty: "Medium", points: 250, type: "Challenge", status: "Available", position: { lat: -26.1930, lng: 28.0320 } }, { id: "5", title: "Art Gallery Quest", description: "Identify the mysterious painting's hidden message", location: "Art Building", difficulty: "Easy", points: 150, type: "Location", status: "Completed", position: { lat: -26.1918, lng: 28.0330 } }, ]; const getDifficultyColor = (difficulty: string) => { switch (difficulty) { case "Easy": return "bg-success"; case "Medium": return "bg-warning"; case "Hard": return "bg-destructive"; default: return "bg-muted"; } }; const handleQuestClick = (quest: QuestMarker) => { setSelectedQuest(quest); if (!userPosition) return; const directionsService = new google.maps.DirectionsService(); directionsService.route( { origin: userPosition, destination: quest.position, travelMode: google.maps.TravelMode.WALKING, }, (result, status) => { if (status === "OK" && result) { setDirections(result); } else { console.error("Directions request failed:", status); } } ); }; return ( <div className="min-h-screen bg-background"> <Header /> <div className="container mx-auto px-4 py-8"> <div className="grid grid-cols-1 lg:grid-cols-3 gap-6"> {/* Map Area */} <div className="lg:col-span-2"> <Card className="bg-gradient-card shadow-card-custom"> <CardHeader> <CardTitle className="flex items-center space-x-2"> <MapPin className="w-6 h-6 text-primary" /> <span>Campus Quest Map</span> </CardTitle> </CardHeader> <CardContent> {isLoaded && ( <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={17} > {/* User location */} {userPosition && <Marker position={userPosition} label="You" />} {/* Quest markers */} {questMarkers.map((quest) => ( <Marker key={quest.id} position={quest.position} onClick={() => handleQuestClick(quest)} /> ))} {/* Directions */} {directions && <DirectionsRenderer directions={directions} />} </GoogleMap> )} </CardContent> </Card> </div> {/* Quest Details */} <div className="space-y-6"> {selectedQuest ? ( <Card className="bg-gradient-card shadow-quest"> <CardHeader> <div className="flex items-start justify-between"> <CardTitle className="text-lg">{selectedQuest.title}</CardTitle> <Badge className={getDifficultyColor(selectedQuest.difficulty)}> {selectedQuest.difficulty} </Badge> </div> </CardHeader> <CardContent className="space-y-4"> <p className="text-muted-foreground">{selectedQuest.description}</p> <div className="space-y-2 text-sm"> <div className="flex items-center space-x-2"> <MapPin className="w-4 h-4 text-primary" /> <span>{selectedQuest.location}</span> </div> <div className="flex items-center space-x-2"> <Star className="w-4 h-4 text-warning" /> <span>{selectedQuest.points} points</span> </div> <div className="flex items-center space-x-2"> <Clock className="w-4 h-4 text-muted-foreground" /> <span>Type: {selectedQuest.type}</span> </div> </div> <div className="pt-4"> {selectedQuest.status === "Available" && ( <Button variant="default" className="w-full"> Start Quest </Button> )} {selectedQuest.status === "In Progress" && ( <Button variant="secondary" className="w-full"> Continue Quest </Button> )} {selectedQuest.status === "Completed" && ( <Button variant="success" className="w-full" disabled> Completed âœ“ </Button> )} </div> </CardContent> </Card> ) : ( <Card className="bg-gradient-card shadow-card-custom"> <CardContent className="text-center py-12"> <MapPin className="w-12 h-12 text-muted-foreground mx-auto mb-4" /> <p className="text-muted-foreground"> Click on a quest marker to view details </p> </CardContent> </Card> )} </div> </div> </div> </div> ); }; export default CampusMap;